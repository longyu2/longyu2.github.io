<?xml version="1.0"?>
<feed xmlns="http://www.w3.org/2005/Atom">
    <id>https://blog.misaka-mikoto.cn</id>
    <title>何穷 • Posts by &#34;编程笔记&#34; category</title>
    <link href="https://blog.misaka-mikoto.cn" />
    <updated>2023-12-25T14:45:59.000Z</updated>
    <entry>
        <id>https://blog.misaka-mikoto.cn/2023/12/25/%E7%BC%96%E7%A8%8B%E7%AC%94%E8%AE%B0/%E4%BF%AE%E5%A4%8D%E8%B4%AA%E5%90%83%E8%9B%87%E4%B8%80%E4%B8%AA%E5%B0%8Fbug/</id>
        <title>修复贪吃蛇一个小bug</title>
        <link rel="alternate" href="https://blog.misaka-mikoto.cn/2023/12/25/%E7%BC%96%E7%A8%8B%E7%AC%94%E8%AE%B0/%E4%BF%AE%E5%A4%8D%E8%B4%AA%E5%90%83%E8%9B%87%E4%B8%80%E4%B8%AA%E5%B0%8Fbug/"/>
        <content type="html">&lt;p&gt;两年前写了一个贪吃蛇，算是十分简陋了。它有一个小漏洞，就是初始化时有一定的几率卡死，必须退出浏览器重进，我之前发现了这个问题，不过并未深究。&lt;/p&gt;
&lt;p&gt;时至今日，我的编程能力突飞猛进之后，再保留这个 bug 就说不过去了。于是我开始定位 bug，很快就找到了无限循环的位置：&lt;/p&gt;
&lt;p&gt;&lt;figure class=&#34;highlight plaintext&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;while(randSnakeHeadi - foodi &amp;lt; 5 &amp;amp;&amp;amp; randSnakeHeadj - foodj &amp;lt; 5)&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    randSnakeHeadi = Math.floor(Math.random()*15)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    randSnakeHeadj = Math.floor(Math.random()*15)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;这里， &lt;code&gt;randSnakeHeadi&lt;/code&gt;  和  &lt;code&gt;randSnakeHeadj&lt;/code&gt;  这两个变量用来表示新生成的贪吃蛇头的坐标， &lt;code&gt;foodi&lt;/code&gt;  和  &lt;code&gt;foodj&lt;/code&gt;  表示的是食物坐标。判断当蛇头和食物的距离过近就重新生成贪吃蛇头的坐标，但我却犯了一个致命的错误，计算坐标的距离直接使用了减法，这样，当减号左边的量小于右边，就会得到负数！这是个不可原谅的错误。它会导致无限循环，食物坐标接近地图的边角，也就是数值最大（使用数组下标就是快接近数组长度），这个循环就没有结束条件了，只要生成的贪吃蛇坐标和食物的坐标距离在 5 以内，就会重新循环，一旦食物的坐标大于地图宽度 - 5，那么 &lt;code&gt;randSnakeHeadi - foodi &lt;/code&gt; 便永远小于 5 , 无限循环。&lt;/p&gt;
&lt;p&gt;解决办法也十分简单，计算距离的时候加上绝对值：&lt;/p&gt;
&lt;p&gt;&lt;figure class=&#34;highlight plaintext&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;while(Math.abs(randSnakeHeadi - foodi) &amp;lt; 5 &amp;amp;&amp;amp; Math.abs( randSnakeHeadj - foodj )&amp;lt; 5)&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;            randSnakeHeadi = Math.floor(Math.random()*15)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;            randSnakeHeadj = Math.floor(Math.random()*15)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;github 地址：&lt;span class=&#34;exturl&#34; data-url=&#34;aHR0cHM6Ly9naXRodWIuY29tL2xvbmd5dTIvbGl0dGxlR2FtZXMv&#34;&gt;js 小游戏&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;仅以此怀念那个在计算机之路上艰难求索的无知少年。&lt;/p&gt;
</content>
        <updated>2023-12-25T14:45:59.000Z</updated>
    </entry>
    <entry>
        <id>https://blog.misaka-mikoto.cn/2023/11/09/%E7%BC%96%E7%A8%8B%E7%AC%94%E8%AE%B0/Artalk%E9%83%A8%E7%BD%B2%E6%95%99%E7%A8%8B/</id>
        <title>Artalk部署教程</title>
        <link rel="alternate" href="https://blog.misaka-mikoto.cn/2023/11/09/%E7%BC%96%E7%A8%8B%E7%AC%94%E8%AE%B0/Artalk%E9%83%A8%E7%BD%B2%E6%95%99%E7%A8%8B/"/>
        <content type="html">&lt;h1 id=&#34;artalk安装教程&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#artalk安装教程&#34;&gt;#&lt;/a&gt; artalk 安装教程&lt;/h1&gt;
&lt;p&gt;本文适合对 linux 有一定了解的同学，不适合纯小白。&lt;/p&gt;
&lt;h4 id=&#34;第一步下载并安装&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#第一步下载并安装&#34;&gt;#&lt;/a&gt; 第一步，下载并安装&lt;/h4&gt;
&lt;hr /&gt;
&lt;p&gt;下载并解压安装包，复制这条命令并运行，他会从 github 下载 artalk 二进制文件并自动解压到当前目录：&lt;/p&gt;
&lt;p&gt;&lt;figure class=&#34;highlight plaintext&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;wget https://github.com/ArtalkJS/Artalk/releases/download/v2.6.4/artalk_v2.6.4_linux_amd64.tar.gz  -O - | tar -xz&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;然后，输入 ls 查看当前目录的文件，如无意外，你会看到这个文件夹：&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;https://longyu2.github.io/images/Artalk%E9%83%A8%E7%BD%B2%E6%95%99%E7%A8%8B/1.png&#34; alt=&#34;如图&#34; /&gt;&lt;/p&gt;
&lt;p&gt;然后 cd 进入，ls 展示目录内容：&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;https://longyu2.github.io/images/Artalk%E9%83%A8%E7%BD%B2%E6%95%99%E7%A8%8B/2.png&#34; alt=&#34;&#34; /&gt;&lt;/p&gt;
&lt;p&gt;然后输入命令：如果看到的是这样，那应该启动成功了&lt;/p&gt;
&lt;p&gt;&lt;figure class=&#34;highlight plaintext&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;nohup ./artalk server &amp;amp;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;https://longyu2.github.io/images/Artalk%E9%83%A8%E7%BD%B2%E6%95%99%E7%A8%8B/3.png&#34; alt=&#34;&#34; /&gt;&lt;/p&gt;
&lt;p&gt;然后在确保你的网络条件没有问题的情况下，地址栏输入 http://&amp;lt;你的域名&amp;gt;:23366，就可以访问 artalk 的管理页面：&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;https://longyu2.github.io/images/Artalk%E9%83%A8%E7%BD%B2%E6%95%99%E7%A8%8B/4.png&#34; alt=&#34;&#34; /&gt;&lt;/p&gt;
&lt;h4 id=&#34;第二步设置管理员账号&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#第二步设置管理员账号&#34;&gt;#&lt;/a&gt; 第二步，设置管理员账号&lt;/h4&gt;
&lt;hr /&gt;
&lt;p&gt;输入命令：&lt;/p&gt;
&lt;p&gt;&lt;figure class=&#34;highlight plaintext&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;./artalk admin&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;即可设置管理员账户和密码：&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;https://longyu2.github.io/images/Artalk%E9%83%A8%E7%BD%B2%E6%95%99%E7%A8%8B/5.png&#34; alt=&#34;&#34; /&gt;****&lt;/p&gt;
&lt;h4 id=&#34;第三步用刚才设置的管理员账号登录&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#第三步用刚才设置的管理员账号登录&#34;&gt;#&lt;/a&gt; 第三步，用刚才设置的管理员账号登录&lt;/h4&gt;
&lt;hr /&gt;
&lt;p&gt;用刚刚设置的账号登录管理页面，按图所示新建站点：&lt;/p&gt;
&lt;p&gt;**&lt;img data-src=&#34;https://longyu2.github.io/images/Artalk%E9%83%A8%E7%BD%B2%E6%95%99%E7%A8%8B/8.png&#34; alt=&#34;&#34; /&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;注意：url 必须包含你站点的 url，如果你的网站（即前端的域名）是 http://baidu.com，那么这里的 site URLs 就需要输入 &lt;span class=&#34;exturl&#34; data-url=&#34;aHR0cDovL2JhaWR1LmNvbQ==&#34;&gt;http://baidu.com&lt;/span&gt;，可输入多个 url，用逗号分隔&lt;/strong&gt;&lt;/p&gt;
&lt;h4 id=&#34;第四步配置前端&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#第四步配置前端&#34;&gt;#&lt;/a&gt; 第四步，配置前端&lt;/h4&gt;
&lt;hr /&gt;
&lt;p&gt;具体前端配置代码参考 artalk 官网，这里只作示范：&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;&lt;img data-src=&#34;https://longyu2.github.io/images/Artalk%E9%83%A8%E7%BD%B2%E6%95%99%E7%A8%8B/6.png&#34; alt=&#34;&#34; /&gt;&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;要注意的是：site 属性必须和刚才后端设置中的站点名称相同；server 属性必须和服务器地址相同&lt;/p&gt;
&lt;h4 id=&#34;第五步打开网站检验是否成功&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#第五步打开网站检验是否成功&#34;&gt;#&lt;/a&gt; 第五步，打开网站，检验是否成功&lt;/h4&gt;
&lt;hr /&gt;
&lt;p&gt;出现 artalk 的评论区，则成功：&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;https://longyu2.github.io/images/Artalk%E9%83%A8%E7%BD%B2%E6%95%99%E7%A8%8B/9.png&#34; alt=&#34;&#34; /&gt;&lt;/p&gt;
</content>
        <updated>2023-11-08T16:00:51.000Z</updated>
    </entry>
    <entry>
        <id>https://blog.misaka-mikoto.cn/2023/11/02/%E7%BC%96%E7%A8%8B%E7%AC%94%E8%AE%B0/react%E5%85%A5%E9%97%A8%E8%AF%AD%E6%B3%95%EF%BC%88%E4%BA%8C%EF%BC%89/</id>
        <title>react入门语法（二）</title>
        <link rel="alternate" href="https://blog.misaka-mikoto.cn/2023/11/02/%E7%BC%96%E7%A8%8B%E7%AC%94%E8%AE%B0/react%E5%85%A5%E9%97%A8%E8%AF%AD%E6%B3%95%EF%BC%88%E4%BA%8C%EF%BC%89/"/>
        <content type="html">&lt;h4 id=&#34;列表渲染&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#列表渲染&#34;&gt;#&lt;/a&gt; 列表渲染&lt;/h4&gt;
&lt;hr /&gt;
&lt;p&gt;使用 map 将集群生成一个 JSX 节点：&lt;/p&gt;
&lt;p&gt;&lt;figure class=&#34;highlight plaintext&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;const List = function () &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    const arr = [1, 2, 3, 4, 5];&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    const ele = arr.map((data) =&amp;gt; &amp;lt;li&amp;gt;&amp;#123;data&amp;#125;&amp;lt;/li&amp;gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    return &amp;lt;ul&amp;gt;&amp;#123;ele&amp;#125;&amp;lt;/ul&amp;gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&amp;#125;;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;h4 id=&#34;条件渲染&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#条件渲染&#34;&gt;#&lt;/a&gt; 条件渲染&lt;/h4&gt;
&lt;hr /&gt;
&lt;p&gt;在组件内通过条件语句控制返回的内容：&lt;/p&gt;
&lt;p&gt;&lt;figure class=&#34;highlight plaintext&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;18&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;19&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;20&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;// 条件显示组件示例&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;const IfComponents = function () &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;  const [isShow, setIsShow] = useState(false);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;  let content = &amp;lt;h1&amp;gt;内容&amp;lt;/h1&amp;gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;  // 使用条件来设置 content 的内容&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;  if (isShow == false) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    content = &amp;lt;&amp;gt;&amp;lt;/&amp;gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;  &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;  const changeShowOrHide = () =&amp;gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    setIsShow(!isShow);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;  &amp;#125;;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;  return (&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &amp;lt;&amp;gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;      &amp;lt;button onClick=&amp;#123;changeShowOrHide&amp;#125;&amp;gt;&amp;#123;isShow ? &amp;quot;隐藏&amp;quot; : &amp;quot;显示&amp;quot;&amp;#125;&amp;lt;/button&amp;gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;      &amp;#123;content&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &amp;lt;/&amp;gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;  );&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&amp;#125;;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;在上面所示的示例中，在组件中定义了一个控制内容显示的状态 &lt;code&gt;isShow&lt;/code&gt; ，并通过按钮改变内容的显示 / 隐藏，按钮本身的文字同时随着三元操作进行改变。&lt;/p&gt;
&lt;h4 id=&#34;将事件处理作为props传递让子组件可以调用父组件的事件处理程序&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#将事件处理作为props传递让子组件可以调用父组件的事件处理程序&#34;&gt;#&lt;/a&gt; 将事件处理作为 props 传递，让子组件可以调用父组件的事件处理程序&lt;/h4&gt;
&lt;hr /&gt;
&lt;p&gt;下面的代码中，父组件可以将事件通过 props 传给子组件，子组件可以通过这一点直接调用父组件的事件处理函数，这使得代码具有了极大的灵活性。而在 Vue 中，这一操作的通过 emit 实现，增加了额外的负担。&lt;/p&gt;
&lt;p&gt;&lt;figure class=&#34;highlight plaintext&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;16&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;// 事件作为props传递&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;const Father = function()&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;  const onClick = ()=&amp;gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    alert(&amp;quot;父组件事件的处理函数！&amp;quot;)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;  &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;  return &amp;lt;&amp;gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &amp;lt;Children onClick=&amp;#123;onClick&amp;#125;/&amp;gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;  &amp;lt;/&amp;gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;const Children = function(&amp;#123;onClick&amp;#125;)&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;  return (&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &amp;lt;&amp;gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;      &amp;lt;button onClick=&amp;#123;onClick&amp;#125;&amp;gt;我是子组件的按钮&amp;lt;/button&amp;gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &amp;lt;/&amp;gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;  )&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
</content>
        <updated>2023-11-01T17:03:09.000Z</updated>
    </entry>
    <entry>
        <id>https://blog.misaka-mikoto.cn/2023/10/30/%E7%BC%96%E7%A8%8B%E7%AC%94%E8%AE%B0/react%E5%85%A5%E9%97%A8%E8%AF%AD%E6%B3%95/</id>
        <title>react入门语法</title>
        <link rel="alternate" href="https://blog.misaka-mikoto.cn/2023/10/30/%E7%BC%96%E7%A8%8B%E7%AC%94%E8%AE%B0/react%E5%85%A5%E9%97%A8%E8%AF%AD%E6%B3%95/"/>
        <content type="html">&lt;h1 id=&#34;react入门语法&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#react入门语法&#34;&gt;#&lt;/a&gt; react 入门语法&lt;/h1&gt;
&lt;h4 id=&#34;组件写法&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#组件写法&#34;&gt;#&lt;/a&gt; 组件写法&lt;/h4&gt;
&lt;hr /&gt;
&lt;p&gt;&lt;figure class=&#34;highlight plaintext&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;const App = function (props) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;  return &amp;lt;h1&amp;gt; Hello, world!&amp;lt;/h1&amp;gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&amp;#125;;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;h4 id=&#34;hook-usestate用法&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#hook-usestate用法&#34;&gt;#&lt;/a&gt; hook : useState 用法&lt;/h4&gt;
&lt;hr /&gt;
&lt;p&gt;定义状态：&lt;/p&gt;
&lt;p&gt;&lt;figure class=&#34;highlight plaintext&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;import &amp;#123; useState &amp;#125; from &amp;quot;react&amp;quot;;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;const [index, setIndex] = useState(0);&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;需要修改时：&lt;/p&gt;
&lt;p&gt;&lt;figure class=&#34;highlight plaintext&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;const add = () =&amp;gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    setIndex(index + 1);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt; &amp;#125;;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;h4 id=&#34;事件写法&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#事件写法&#34;&gt;#&lt;/a&gt; 事件写法&lt;/h4&gt;
&lt;hr /&gt;
&lt;p&gt;在组件中添加事件时，要小驼峰式命名，函数要用 {} 括起来，一个根据点击次数逐渐增加自身数字的按钮示例：&lt;/p&gt;
&lt;p&gt;&lt;figure class=&#34;highlight plaintext&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;9&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;const Add = function () &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;  const [index, setIndex] = useState(0);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;  const addThis = () =&amp;gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    setIndex(index + 1);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;  &amp;#125;;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;  return &amp;lt;button onClick=&amp;#123;addThis&amp;#125;&amp;gt;&amp;#123;index&amp;#125;&amp;lt;/button&amp;gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&amp;#125;;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;h4 id=&#34;props-用法&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#props-用法&#34;&gt;#&lt;/a&gt; props 用法&lt;/h4&gt;
&lt;hr /&gt;
&lt;p&gt;将 props 作为函数组件的参数输入，并通过 prop 的属性获取值， props 不可被修改，一般通过一个新的状态复制 props 值。这是一个示例：&lt;/p&gt;
&lt;p&gt;&lt;figure class=&#34;highlight plaintext&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;15&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;// hello组件&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;const Hello = function (props) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;  return &amp;lt;h1&amp;gt;Hello, world!&amp;#123;props.name&amp;#125;&amp;lt;/h1&amp;gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&amp;#125;;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;// react渲染&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;ReactDOM.createRoot(document.getElementById(&amp;quot;root&amp;quot;)!).render(&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;  &amp;lt;React.StrictMode&amp;gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;      &amp;lt;&amp;gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &amp;lt;Hello name=&amp;quot;zhangsan&amp;quot; /&amp;gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;      &amp;lt;/&amp;gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;  &amp;lt;/React.StrictMode&amp;gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;);&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;在该例子中，hello 组件会根据 &lt;code&gt;props.name&lt;/code&gt;  获取到输入的 prop 值。&lt;/p&gt;
</content>
        <updated>2023-10-30T06:25:50.000Z</updated>
    </entry>
    <entry>
        <id>https://blog.misaka-mikoto.cn/2023/10/28/%E7%BC%96%E7%A8%8B%E7%AC%94%E8%AE%B0/%E4%BF%AE%E5%A4%8D%E4%BA%86%E4%B8%80%E4%B8%AA%E5%9C%A8%E7%BA%BF%E7%AC%94%E8%AE%B0%E5%A4%A7%E7%97%9B%E7%82%B9/</id>
        <title>修复了一个在线笔记大痛点</title>
        <link rel="alternate" href="https://blog.misaka-mikoto.cn/2023/10/28/%E7%BC%96%E7%A8%8B%E7%AC%94%E8%AE%B0/%E4%BF%AE%E5%A4%8D%E4%BA%86%E4%B8%80%E4%B8%AA%E5%9C%A8%E7%BA%BF%E7%AC%94%E8%AE%B0%E5%A4%A7%E7%97%9B%E7%82%B9/"/>
        <content type="html">&lt;h4 id=&#34;起因&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#起因&#34;&gt;#&lt;/a&gt; 起因&lt;/h4&gt;
&lt;p&gt;由于文章的编辑是使用  &lt;code&gt;title&lt;/code&gt;  和  &lt;code&gt;content&lt;/code&gt;  两个响应式变量双向绑定着编辑区的输入框&lt;/p&gt;
&lt;p&gt;变量：&lt;/p&gt;
&lt;p&gt;&lt;figure class=&#34;highlight apache&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;attribute&#34;&gt;let&lt;/span&gt;&lt;span class=&#34;meta&#34;&gt; [title, content] = [ref(&amp;#x27;&amp;#x27;), ref(&amp;#x27;&amp;#x27;)]&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;&lt;figure class=&#34;highlight apache&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;section&#34;&gt;&amp;lt;input id=&lt;span class=&#34;string&#34;&gt;&amp;quot;input-title&amp;quot;&lt;/span&gt; placeholder=&lt;span class=&#34;string&#34;&gt;&amp;quot;请输入标题&amp;quot;&lt;/span&gt; v-model=&lt;span class=&#34;string&#34;&gt;&amp;quot;title&amp;quot;&lt;/span&gt; /&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;使用  &lt;code&gt;articleId&lt;/code&gt;  作为当前浏览的文章，当监听到 articleId 的变化，则会通过网络请求更新  &lt;code&gt; title&lt;/code&gt;  和  &lt;code&gt;content&lt;/code&gt;  ：&lt;/p&gt;
&lt;p&gt;&lt;figure class=&#34;highlight apache&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;18&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;// 监视&lt;span class=&#34;attribute&#34;&gt;articleId&lt;/span&gt;如有变化，重新渲染文章列表&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;attribute&#34;&gt;watch&lt;/span&gt;(&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;  () =&amp;gt; &lt;span class=&#34;attribute&#34;&gt;props&lt;/span&gt;.articleId,&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;  (&lt;span class=&#34;attribute&#34;&gt;articleId&lt;/span&gt;, prevArticleId) =&amp;gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;attribute&#34;&gt;if&lt;/span&gt; (articleId == prevArticleId) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;      &lt;span class=&#34;attribute&#34;&gt;console&lt;/span&gt;.error(&amp;#x27;错误，watch新旧值相等了！&amp;#x27;)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &amp;#125; &lt;span class=&#34;attribute&#34;&gt;else&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;      // 使用&lt;span class=&#34;attribute&#34;&gt;axios&lt;/span&gt; 获取文章信息&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;      &lt;span class=&#34;attribute&#34;&gt;axios&lt;/span&gt;.get(`&lt;span class=&#34;variable&#34;&gt;$&amp;#123;server_url&amp;#125;&lt;/span&gt;/article/&lt;span class=&#34;variable&#34;&gt;$&amp;#123;props.articleId&amp;#125;&lt;/span&gt;`).then((results) =&amp;gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        // 将查询到的文章信息赋给&lt;span class=&#34;attribute&#34;&gt;title&lt;/span&gt; 和 content 两个响应性变量&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &lt;span class=&#34;attribute&#34;&gt;title&lt;/span&gt;.value = results.data[&lt;span class=&#34;number&#34;&gt;0&lt;/span&gt;].title&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &lt;span class=&#34;attribute&#34;&gt;content&lt;/span&gt;.value = results.data[&lt;span class=&#34;number&#34;&gt;0&lt;/span&gt;].content&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &lt;span class=&#34;attribute&#34;&gt;initEditor&lt;/span&gt;(results.data[&lt;span class=&#34;number&#34;&gt;0&lt;/span&gt;].content)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;      &amp;#125;)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;  &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;)&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;所以当每次切换文章时，重新为编辑器填充的值就会触发  &lt;code&gt;watch&lt;/code&gt; ，从而使得  &lt;code&gt;saveArticle&lt;/code&gt;  方法被触发：&lt;/p&gt;
&lt;p&gt;&lt;figure class=&#34;highlight apache&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;// 监听&lt;span class=&#34;attribute&#34;&gt;tite&lt;/span&gt; 和 content&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;attribute&#34;&gt;watch&lt;/span&gt;([title, content], ([newTitle, newContent]) =&amp;gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;attribute&#34;&gt;saveArticle&lt;/span&gt;(props.articleId, title.value, content.value)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&amp;#125;)&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;又因为  &lt;code&gt;saveArticle&lt;/code&gt;  方法会向服务器发送修改请求，于是本该在内容被编辑时触发的请求却在切换文章时由于填充  &lt;code&gt;title&lt;/code&gt;  和  &lt;code&gt;content&lt;/code&gt;  时被触发，导致文章的修改时间被切换时覆盖。&lt;/p&gt;
&lt;h4 id=&#34;解决方法&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#解决方法&#34;&gt;#&lt;/a&gt; 解决方法&lt;/h4&gt;
&lt;p&gt;添加一个变量作为锁，锁住  &lt;code&gt;saveArticle&lt;/code&gt;  的触发，并在触发后解锁，保证正常的编辑能够正常触发  &lt;code&gt;saveArticle&lt;/code&gt;  ，在监听  &lt;code&gt;articleId&lt;/code&gt;  的变化时 (组件通过监听  &lt;code&gt;articleId&lt;/code&gt;  变化来确定当前浏览的文章更改 )，将锁开启，并在触发  &lt;code&gt;title&lt;/code&gt;  和  &lt;code&gt;content&lt;/code&gt;  之后将锁解锁，即可。&lt;/p&gt;
&lt;h4 id=&#34;实现&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#实现&#34;&gt;#&lt;/a&gt; 实现&lt;/h4&gt;
&lt;p&gt;定义锁&lt;/p&gt;
&lt;p&gt;&lt;figure class=&#34;highlight apache&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;attribute&#34;&gt;let&lt;/span&gt; contentUpdateLock = false&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;在 监听到  &lt;code&gt;articleId 改变时 &lt;/code&gt; 启动锁：&lt;/p&gt;
&lt;p&gt;&lt;figure class=&#34;highlight apache&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;18&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;19&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;20&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;21&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;// 监视&lt;span class=&#34;attribute&#34;&gt;articleId&lt;/span&gt;如有变化，重新渲染文章列表&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;attribute&#34;&gt;watch&lt;/span&gt;(&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;  () =&amp;gt; &lt;span class=&#34;attribute&#34;&gt;props&lt;/span&gt;.articleId,&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;  (&lt;span class=&#34;attribute&#34;&gt;articleId&lt;/span&gt;, prevArticleId) =&amp;gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;attribute&#34;&gt;if&lt;/span&gt; (articleId == prevArticleId) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;      &lt;span class=&#34;attribute&#34;&gt;console&lt;/span&gt;.error(&amp;#x27;错误，watch新旧值相等了！&amp;#x27;)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &amp;#125; &lt;span class=&#34;attribute&#34;&gt;else&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;      // 使用&lt;span class=&#34;attribute&#34;&gt;axios&lt;/span&gt; 获取文章信息&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;      &lt;span class=&#34;attribute&#34;&gt;axios&lt;/span&gt;.get(`&lt;span class=&#34;variable&#34;&gt;$&amp;#123;server_url&amp;#125;&lt;/span&gt;/article/&lt;span class=&#34;variable&#34;&gt;$&amp;#123;props.articleId&amp;#125;&lt;/span&gt;`).then((results) =&amp;gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        // 将查询到的文章信息赋给&lt;span class=&#34;attribute&#34;&gt;title&lt;/span&gt; 和 content 两个响应性变量&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        // 由&lt;span class=&#34;attribute&#34;&gt;articleId&lt;/span&gt;变化而产生的刷新，锁住&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &lt;span class=&#34;attribute&#34;&gt;contentUpdateLock&lt;/span&gt; = true&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &lt;span class=&#34;attribute&#34;&gt;title&lt;/span&gt;.value = results.data[&lt;span class=&#34;number&#34;&gt;0&lt;/span&gt;].title&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &lt;span class=&#34;attribute&#34;&gt;content&lt;/span&gt;.value = results.data[&lt;span class=&#34;number&#34;&gt;0&lt;/span&gt;].content&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &lt;span class=&#34;attribute&#34;&gt;initEditor&lt;/span&gt;(results.data[&lt;span class=&#34;number&#34;&gt;0&lt;/span&gt;].content)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;      &amp;#125;)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;  &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;)&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;在 监听到 &lt;code&gt;title&lt;/code&gt;  和  &lt;code&gt;content&lt;/code&gt;  的变化时，根据锁的状态，拦截启动  &lt;code&gt;saveArticle&lt;/code&gt;  函数，并且锁启动一次后自动销毁，这样就不会影响正常的编辑（监听 articleId 变化 =&amp;gt; 锁激活 =&amp;gt; 监听 title 和 content 变化 =&amp;gt; 锁拦截调用 saveArticle =&amp;gt; 锁自动销毁），而正常进行编辑时，只会 触发 title 和 content 的监听，不会改变 articleId，锁不会被激活，不会阻塞正常编辑的调用。&lt;/p&gt;
&lt;p&gt;代码如下：&lt;/p&gt;
&lt;p&gt;&lt;figure class=&#34;highlight apache&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;9&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;// 监听 &lt;span class=&#34;attribute&#34;&gt;title&lt;/span&gt; 和 content&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;attribute&#34;&gt;watch&lt;/span&gt;([title, content], ([newTitle, newContent]) =&amp;gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;  // 如果被锁住，不可以触发储存方法&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;  &lt;span class=&#34;attribute&#34;&gt;if&lt;/span&gt; (!contentUpdateLock) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;attribute&#34;&gt;saveArticle&lt;/span&gt;(props.articleId, title.value, content.value)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;  &amp;#125; &lt;span class=&#34;attribute&#34;&gt;else&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;attribute&#34;&gt;contentUpdateLock&lt;/span&gt; = false // 触发后解锁，则不会影响正常使用&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;  &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&amp;#125;)&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
</content>
        <updated>2023-10-28T12:34:30.000Z</updated>
    </entry>
    <entry>
        <id>https://blog.misaka-mikoto.cn/2023/10/18/%E7%BC%96%E7%A8%8B%E7%AC%94%E8%AE%B0/%E7%BC%96%E7%A8%8B%E7%9A%84%E4%B8%8A%E9%99%90/</id>
        <title>编程的上限</title>
        <link rel="alternate" href="https://blog.misaka-mikoto.cn/2023/10/18/%E7%BC%96%E7%A8%8B%E7%AC%94%E8%AE%B0/%E7%BC%96%E7%A8%8B%E7%9A%84%E4%B8%8A%E9%99%90/"/>
        <content type="html">&lt;h4 id=&#34;应用开发的上限&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#应用开发的上限&#34;&gt;#&lt;/a&gt; 应用开发的上限&lt;/h4&gt;
&lt;p&gt;与一些人的交谈中，我能感觉到他们的基础薄弱，特别是在计算机网络这块，于是我想明白了一件事情：应用开发的上限很低。使用的都是别人现成开发好的工具，当业务开发到极限，你所能做的事情也就没有什么了，重要的是，长年累月可能只是熟悉了框架的使用，未有将自己编程能力突破的机会。&lt;/p&gt;
&lt;h4 id=&#34;编程能力究竟是如何提高的&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#编程能力究竟是如何提高的&#34;&gt;#&lt;/a&gt; 编程能力究竟是如何提高的&lt;/h4&gt;
&lt;p&gt;程序员与所有其他职业不同，程序员是自我革命的，如果无法自我革新，不停地突破自我，那么将只是个黏合工。程序设计的难点从来都不在程序本身，而在于其与现实世界的拟合，这是只有水平稍高的程序员才能体会到的，就像以前，在我眼里编程语言就是全部，但现在我却觉得，所有的语言殊途同归，他们要做的事情都只是命令计算机而已，而计算机的物理实体决定了所有的编程语言要做的事情都是一样的，所以，要提高编程的水平，还是得从计算机的本质开始。为什么很多人将计算机考研四门基础课视为屠龙术？正是因为它揭示了计算机的本质。而从不触及本质，永远在应用层摸爬滚打，绝不是一个明智的选择。&lt;/p&gt;
&lt;h4 id=&#34;具体方向的一些思路&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#具体方向的一些思路&#34;&gt;#&lt;/a&gt; 具体方向的一些思路&lt;/h4&gt;
&lt;p&gt;我想，还是得从造轮子开始。也许我得自己多实现一些像 tcp 协议栈，自己制作一个小型的操作系统，以及实现业内流行的框架系统开始。&lt;/p&gt;
</content>
        <updated>2023-10-18T10:26:14.000Z</updated>
    </entry>
    <entry>
        <id>https://blog.misaka-mikoto.cn/2023/04/06/%E7%BC%96%E7%A8%8B%E7%AC%94%E8%AE%B0/%E7%BD%91%E7%BB%9C%E6%B5%81%E7%A8%8B/</id>
        <title>网络流程</title>
        <link rel="alternate" href="https://blog.misaka-mikoto.cn/2023/04/06/%E7%BC%96%E7%A8%8B%E7%AC%94%E8%AE%B0/%E7%BD%91%E7%BB%9C%E6%B5%81%E7%A8%8B/"/>
        <content type="html">&lt;h3 id=&#34;前提&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#前提&#34;&gt;#&lt;/a&gt; 前提&lt;/h3&gt;
&lt;p&gt;本文为了简明地向你解释&lt;br /&gt;
本文假设你已经有简单的 html 和 css 知识和一些网络的常识&lt;br /&gt;
假设你已经知道一些简要的概念如 IP 地址等。&lt;br /&gt;
这是一个最基本的模型：&lt;br /&gt;
2222&lt;br /&gt;
&lt;img data-src=&#34;https://longyu2.github.io/images/1.jpg&#34; alt=&#34;&#34; /&gt;&lt;br /&gt;
 在这个模型中，用户首先向服务器发起一个请求，服务器再把 html 发送给用户，用户的浏览器再将 html 文档渲染成页面。&lt;/p&gt;
&lt;p&gt;当网络上只有客户和服务器两台机器的时候，客户机可以直接给服务器发送请求，服务器也可以直接向客户机发送数据，但如果网络上，机器的数量躲起来之后，客户机如何找到自己需要的服务器呢？这时候就需要 IP 地址了。&lt;/p&gt;
&lt;p&gt;IP 地址是一串 32 位的二进制数，常使用点分 2 进制写法，如 192.168.1.1，这就是一个 IP 地址。它就像互联网上机器的门牌号，根据这个门牌号就能找到对应的计算机。从而访问网站。&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;https://longyu2.github.io/images/2.jpg&#34; alt=&#34;&#34; /&gt;&lt;br /&gt;
当用户在浏览器地址栏输入  &lt;code&gt;http://192.168.1.1&lt;/code&gt; ，浏览器就会向这个 ip 地址发起请求，而当服务器接收到请求之后，就会将 html 页面发送给浏览器，这样，就完成了网站的访问。&lt;/p&gt;
&lt;h4 id=&#34;域名&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#域名&#34;&gt;#&lt;/a&gt; 域名&lt;/h4&gt;
&lt;p&gt;由于 IP 地址太长而不方便记忆，于是人们引入了域名。域名通常用字母加点组成。如 &lt;code&gt;baidu.com&lt;/code&gt;  就是一个域名。域名的作用是 IP 地址的助记符，就向你不知道你学校的具体门牌号，但你打出租车，只要告诉司机学校的名字，他也能把你送到目的地。这样，在访问网站时，大家就都只使用更短的域名，而不用输入一大串的 IP 地址了。&lt;/p&gt;
&lt;p&gt;那么，域名是如何转化为 IP 地址的呢？这需要借助 DNS 解析，它的实现过程本文不再赘述，若感兴趣可自行 Google。你只需要知道 DNS 的作用就是把域名转化为 IP 地址就行。&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;https://longyu2.github.io/images/3.jpg&#34; alt=&#34;&#34; /&gt;&lt;/p&gt;
&lt;p&gt;如上图所示，浏览器只需要去询问 dns 服务器，即可知道域名对于的 IP 地址，而这个过程浏览器帮助我们完成了，输入域名就可以直接访问网站。&lt;/p&gt;
&lt;h4 id=&#34;超链接&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#超链接&#34;&gt;#&lt;/a&gt; 超链接&lt;/h4&gt;
&lt;p&gt;在网站中，有一些点击之后会跳转到其他网站的按钮，它们就是超链接。它们使互联网真正地互联了起来，你只要有一个浏览器，就可以在一个任意网站之间跳来跳去，换而言之，超链接把整个网络连接在了一起，这就是 world wide web , 万维网。&lt;/p&gt;
</content>
        <updated>2023-04-06T15:24:00.000Z</updated>
    </entry>
    <entry>
        <id>https://blog.misaka-mikoto.cn/2023/02/25/%E7%BC%96%E7%A8%8B%E7%AC%94%E8%AE%B0/frp%E5%86%85%E7%BD%91%E7%A9%BF%E9%80%8F/</id>
        <title>frp内网穿透</title>
        <link rel="alternate" href="https://blog.misaka-mikoto.cn/2023/02/25/%E7%BC%96%E7%A8%8B%E7%AC%94%E8%AE%B0/frp%E5%86%85%E7%BD%91%E7%A9%BF%E9%80%8F/"/>
        <content type="html">&lt;h3 id=&#34;内网穿透&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#内网穿透&#34;&gt;#&lt;/a&gt; 内网穿透&lt;/h3&gt;
&lt;hr /&gt;
&lt;p&gt;众所周知，由于 NAT 技术，用户被分割成了一个个的局域网，开放的 web 已经不复存在。由于 IPv4 地址的短缺，加上 IPv6 全面普及的遥遥无期，内网穿透有了极大的必要。&lt;/p&gt;
&lt;h3 id=&#34;frp&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#frp&#34;&gt;#&lt;/a&gt; frp&lt;/h3&gt;
&lt;hr /&gt;
&lt;p&gt;内网穿透技术有很多，我选择了比较主流的 frp。一般来说，内网穿透都需要一台具有公网 IP 的服务器，当然也有端到端的穿透，但是这种打洞技术需要在两个客户端之间都安装穿透软件，无法直接使用 Web，暂时不使用。以后需要在两个设备之间传输大文件时再使用这种。&lt;/p&gt;
&lt;h3 id=&#34;使用frp-将本地网站映射到公网&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#使用frp-将本地网站映射到公网&#34;&gt;#&lt;/a&gt; 使用 frp 将本地网站映射到公网&lt;/h3&gt;
&lt;hr /&gt;
&lt;p&gt;操作步骤：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;下载对应的 frp 包，并解压&lt;/li&gt;
&lt;li&gt;将 frps 程序 和 frps.ini 配置文件放至服务器对应目录，将 frpc 程序 和 frpc.ini 配置文件放至服务器对应目录。&lt;/li&gt;
&lt;li&gt;修改 frps.ini，设置与客户端通信的端口，以及暴露给外界的 http 端口，并启动 &lt;code&gt;./frps -c frps.ini命令&lt;/code&gt; 。&lt;br /&gt;
&lt;figure class=&#34;highlight plaintext&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;[common]&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;bind_port = 7000&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;vhost_http_port = 8080&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/li&gt;
&lt;li&gt;修改 frpc.ini，设置与服务器通信的端口和本地 web 服务器的端口，并启动 &lt;code&gt;./frpc -c frpc.ini命令&lt;/code&gt; 。&lt;br /&gt;
&lt;figure class=&#34;highlight plaintext&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;13&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;[common]&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;server_addr = x.x.x.x&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;server_port = 7000&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;[web]&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;type = http&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;local_port = 80&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;custom_domains = www.yourdomain.com&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;[web2]&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;type = http&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;local_port = 8080&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;custom_domains = www.yourdomain2.com&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/li&gt;
&lt;li&gt;使用浏览器访问设置的域名，则可访问到内网网站。&lt;/li&gt;
&lt;/ol&gt;
</content>
        <updated>2023-02-24T23:23:29.000Z</updated>
    </entry>
    <entry>
        <id>https://blog.misaka-mikoto.cn/2023/02/24/%E7%BC%96%E7%A8%8B%E7%AC%94%E8%AE%B0/%E6%8B%86%E5%88%86%E7%BB%84%E4%BB%B6%E4%B8%8E%E9%AB%98%E5%86%85%E8%81%9A/</id>
        <title>拆分组件与高内聚</title>
        <link rel="alternate" href="https://blog.misaka-mikoto.cn/2023/02/24/%E7%BC%96%E7%A8%8B%E7%AC%94%E8%AE%B0/%E6%8B%86%E5%88%86%E7%BB%84%E4%BB%B6%E4%B8%8E%E9%AB%98%E5%86%85%E8%81%9A/"/>
        <content type="html">&lt;h3 id=&#34;一千五百行的组件&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#一千五百行的组件&#34;&gt;#&lt;/a&gt; 一千五百行的组件&lt;/h3&gt;
&lt;hr /&gt;
&lt;p&gt;在很长的一段时间内，我仍然在 SPA 开发时没有去拆分组件，而是将所有的逻辑代码写在了同一个组件之中。因为这些 UI 和代码没有复用的需要，写在一个组件中还省去了组件通信的麻烦。所有的变量都近乎是全局变量，写起来不要太简单。但很快，我就吃到了苦果。变量和函数越来越多，命名越来越长，超过一千五百行的组件代码，让我在来回的滚动，即使是一直用 Ctrl+F，查找代码块的位置都花了不少时间。&lt;/p&gt;
&lt;h3 id=&#34;拆分组件的好处与困难&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#拆分组件的好处与困难&#34;&gt;#&lt;/a&gt; 拆分组件的好处与困难&lt;/h3&gt;
&lt;hr /&gt;
&lt;p&gt;于是我终于决定对其拆分。想了一下拆分有哪些好处:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;代码高内聚低耦合，模块化更明显，每个组件只需做好分类之事，debug 更快。&lt;/li&gt;
&lt;li&gt;单个文件代码的行数大大减少，省去了很多在代码块之间定位，查找的麻烦。&lt;/li&gt;
&lt;li&gt;从次以后搭建起模块框架，后续的开发能轻松不少。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;那么困难呢？也有不少：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;组件与组件之间额外通信的开销&lt;/li&gt;
&lt;li&gt;由于从前的代码都是使用的选项式 API，更换成组合式 API 需要大量工作。&lt;/li&gt;
&lt;li&gt;以前的代码已经有很深的耦合，解耦需要花很多时间精力。&lt;/li&gt;
&lt;li&gt;重构往往会引发屎山崩溃，产生不可预知的后果。&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;决定&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#决定&#34;&gt;#&lt;/a&gt; 决定&lt;/h3&gt;
&lt;p&gt;尽管困难重重，但我还是选择了重构代码，将组件慢慢进行拆分，代码进行重写，并重新进行测试，目前还只完成了一小部分，但为未来打下了更好的基础，使在线笔记这个项目能够更长远地生存下去。&lt;/p&gt;
</content>
        <updated>2023-02-23T19:41:57.000Z</updated>
    </entry>
    <entry>
        <id>https://blog.misaka-mikoto.cn/2023/02/18/%E7%BC%96%E7%A8%8B%E7%AC%94%E8%AE%B0/%E4%B8%89%E5%B1%82%E6%9E%B6%E6%9E%84/</id>
        <title>在线笔记的开发与三层架构</title>
        <link rel="alternate" href="https://blog.misaka-mikoto.cn/2023/02/18/%E7%BC%96%E7%A8%8B%E7%AC%94%E8%AE%B0/%E4%B8%89%E5%B1%82%E6%9E%B6%E6%9E%84/"/>
        <content type="html">&lt;h3 id=&#34;起源&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#起源&#34;&gt;#&lt;/a&gt; 起源&lt;/h3&gt;
&lt;hr /&gt;
&lt;p&gt;再次在在线笔记的架构选择中使用了三层架构，之前还是在三年多前学习 ASP.NET 的时候使用过，后来并未怎么写过代码，于是已经忘却。&lt;/p&gt;
&lt;h3 id=&#34;新的发现&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#新的发现&#34;&gt;#&lt;/a&gt; 新的发现&lt;/h3&gt;
&lt;hr /&gt;
&lt;p&gt;刚开始，我的在线笔记没有分层，所有的代码全部写在一个 js 文件中，刚开始，只有几个接口的时候没有什么感觉，到了后来，接口数量和业务逻辑越来越多，我才明白了分层的重要性。&lt;br /&gt;
我也明白了代码需要高内聚低耦合的重要。&lt;/p&gt;
&lt;h3 id=&#34;三层的优势&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#三层的优势&#34;&gt;#&lt;/a&gt; 三层的优势&lt;/h3&gt;
&lt;hr /&gt;
&lt;p&gt;循环依赖。低层不会调用高层，高层调用次高层，次高调用底层。缺点就是循环调用，纵向耦合性太强，底层的依赖模块不能随意删除（或者说底层模块本来就不需要更换什么的）。但是搭起了三层架构以后，业务的拓展就非常的方便。由于是面向接口的前后端分离模式，增加功能只需要横向拓展，增加新功能就像搭积木一样，在架构大体搭建完成以后，功能的增加就像搭积木一样，功能模块与功能模块之间横向的耦合几乎为 0！这使得后端的开发成为了像建房子一样轻松的事情，大体的框架已经具有，只需按照设定的规则编写功能模块，就能迅速进行功能开发。我甚至想到，可以写出一个可视化工具用来构建后端的开发，几乎是可行的，但是由于功能需要的数量可能没那么多，加上测试还是有一定的困难，暂时先放下，有机会再去试验。&lt;/p&gt;
&lt;h3 id=&#34;promise&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#promise&#34;&gt;#&lt;/a&gt; Promise&lt;/h3&gt;
&lt;hr /&gt;
&lt;p&gt;我一度对于 js 的异步非常讨厌。它使我无法控制代码运行的顺序，经常会导致难以理解的 bug 出现，诚然这与我对 js 的了解脱不了干系，但也说明 js 的缺陷确实还是很大。但今天我终于学会了 Promise 的使用，作为对异步的修改，在我弄懂它之后，我感觉到了莫大的喜悦，它使我对于 js 的使用简单了许多。&lt;/p&gt;
&lt;h3 id=&#34;可拓展性&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#可拓展性&#34;&gt;#&lt;/a&gt; 可拓展性&lt;/h3&gt;
&lt;hr /&gt;
&lt;p&gt;在知乎的一篇文章中看见，程序员仿佛就像是在与未来的人交流，我深有同感。代码就像是写给未来能看到这代码的人的一封信一般，所以，需要尽可能的简单易懂，这种跨越时间，空间。与灵魂的交流，让人感觉到奇妙。&lt;/p&gt;
&lt;p&gt;代码也是需要留下可拓展的空间的。尽量去做到高内聚低耦合，这样就为未来的拓展留下了足够的空间，就算是重写，也能有迹可循。反之，如果写的太烂，循环的调用，各种强耦合，使得代码完全失去了扩展的余地，那就是十分害人了。&lt;/p&gt;
</content>
        <updated>2023-02-17T22:49:00.000Z</updated>
    </entry>
    <entry>
        <id>https://blog.misaka-mikoto.cn/2023/01/11/%E7%BC%96%E7%A8%8B%E7%AC%94%E8%AE%B0/%E7%A7%BB%E5%8A%A8%E7%AB%AF%E9%80%82%E9%85%8D%E4%B8%AD%E7%9A%84%E8%A7%86%E5%8F%A3/</id>
        <title>移动端适配中的视口</title>
        <link rel="alternate" href="https://blog.misaka-mikoto.cn/2023/01/11/%E7%BC%96%E7%A8%8B%E7%AC%94%E8%AE%B0/%E7%A7%BB%E5%8A%A8%E7%AB%AF%E9%80%82%E9%85%8D%E4%B8%AD%E7%9A%84%E8%A7%86%E5%8F%A3/"/>
        <content type="html">&lt;h5 id=&#34;2023111434&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#2023111434&#34;&gt;#&lt;/a&gt; 2023/1/11		4:34&lt;/h5&gt;
&lt;h4 id=&#34;视口是什么&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#视口是什么&#34;&gt;#&lt;/a&gt; 视口是什么&lt;/h4&gt;
&lt;hr /&gt;
&lt;p&gt;在桌面浏览器中，视口即指的是浏览器窗口。&lt;/p&gt;
&lt;p&gt;在移动端中，视口分为&lt;strong&gt;布局视口&lt;/strong&gt;（layout viewport）和&lt;strong&gt;视觉视口&lt;/strong&gt;（visual viewport），还有一个概念叫做&lt;strong&gt;理想视口&lt;/strong&gt;（ideal viewport），它是布局视口的理想实现。理想视口的宽度等于视觉视口。&lt;/p&gt;
&lt;h4 id=&#34;视觉视口&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#视觉视口&#34;&gt;#&lt;/a&gt; 视觉视口&lt;/h4&gt;
&lt;hr /&gt;
&lt;p&gt;视觉视口即移动端屏幕的范围，即设备的可视区域。单位为 CSS 像素（见后文）。&lt;/p&gt;
&lt;p&gt;当我们在手机中缩放时，视觉视口的大小会被改变。&lt;/p&gt;
&lt;h4 id=&#34;布局视口&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#布局视口&#34;&gt;#&lt;/a&gt; 布局视口&lt;/h4&gt;
&lt;hr /&gt;
&lt;p&gt;布局视口即我们在 css 代码中可获取的视口范围，我们编写的 html 页面都处于布局视口内。&lt;/p&gt;
&lt;p&gt;布局视口宽度若超过了视觉视口，则此时无法看到完整的网页，只能看到视觉视口内的部分。可通过左右滑动查看完整网页。&lt;/p&gt;
&lt;h4 id=&#34;理想视口&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#理想视口&#34;&gt;#&lt;/a&gt; 理想视口&lt;/h4&gt;
&lt;hr /&gt;
&lt;p&gt;视觉视口的大小由屏幕的宽高决定，无法更改，但布局视口可以人为设置大小。为了能让网页的内容完全的显示出来，布局视口有一个最合适的值，这个值就是视觉视口的大小，也就是理想视口。或许可以这么说，“理想视口” 就是 “布局视口的理想值”。当布局视口宽度等于视觉视口，网页的内容就能完整的展现出来，无需缩放和滑动，所以，理想视口的值就是视觉视口。&lt;/p&gt;
&lt;h4 id=&#34;物理像素&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#物理像素&#34;&gt;#&lt;/a&gt; 物理像素&lt;/h4&gt;
&lt;hr /&gt;
&lt;p&gt;显示器的最小物理单位。由红、蓝、绿三个 led 通过不同的亮度混合出各种色彩。&lt;/p&gt;
&lt;h4 id=&#34;设备独立像素device-independent-pixels&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#设备独立像素device-independent-pixels&#34;&gt;#&lt;/a&gt; 设备独立像素（device independent pixels）&lt;/h4&gt;
&lt;hr /&gt;
&lt;p&gt;区别于&lt;strong&gt;物理像素&lt;/strong&gt;，我们所说的 iphoneX 的逻辑分辨率 375 x 812 指的就是设备独立像素。chrome 检查元素模拟调试手机设备时显示如 &lt;code&gt;375x667&lt;/code&gt;  和  &lt;code&gt;320x480&lt;/code&gt;  都是设备独立像素。&lt;/p&gt;
&lt;p&gt;一个设备独立像素里可能包含 1 个或者多个物理像素点。&lt;/p&gt;
&lt;h4 id=&#34;css像素&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#css像素&#34;&gt;#&lt;/a&gt; css 像素&lt;/h4&gt;
&lt;hr /&gt;
&lt;p&gt;在 css 中，使用的 pixel 即 css 像素，当页面缩放比为 1 时，一个&lt;strong&gt; css 像素&lt;/strong&gt;对应一个&lt;strong&gt;设备独立像素&lt;/strong&gt;，当页面缩放比不为 1 时，CSS 像素和设备独立像素不再对应。比如当页面放大 200%，则 1 个 CSS 像素等于 4 个设备独立像素。&lt;/p&gt;
</content>
        <updated>2023-01-10T20:34:00.000Z</updated>
    </entry>
    <entry>
        <id>https://blog.misaka-mikoto.cn/2022/10/29/%E7%BC%96%E7%A8%8B%E7%AC%94%E8%AE%B0/%E4%BB%8A%E6%97%A5%E7%BC%96%E7%A8%8B%E7%AC%94%E8%AE%B0/</id>
        <title>今日编程笔记</title>
        <link rel="alternate" href="https://blog.misaka-mikoto.cn/2022/10/29/%E7%BC%96%E7%A8%8B%E7%AC%94%E8%AE%B0/%E4%BB%8A%E6%97%A5%E7%BC%96%E7%A8%8B%E7%AC%94%E8%AE%B0/"/>
        <content type="html">&lt;h3 id=&#34;1今日之收获&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#1今日之收获&#34;&gt;#&lt;/a&gt; 1. 今日之收获&lt;/h3&gt;
&lt;p&gt;今天的主要收获是，在帮助石磊的时候，重新审视了 node 在线聊天的许多漏洞，并加以完善，而且，在功能的拓展中，我充分的体会到了我当初使用状态码来进行接口消息的区分是多么正确的决定。使用三位数状态码来标记接口传输的 json 数据的功能，使我在扩展接口时非常顺利，没有任何的困难。这就是之前充分设计的好处，我终于体会到了代码需要良好的可扩展性，在写代码时，不仅仅要注重业务逻辑，更重要的是注重代码的健壮和可扩展性。之前忘了在哪看到，程序员老手写的代码只有 2 成是用在业务逻辑，剩下 8 成，是在保证代码的健壮，可复用性，安全。如今我终于深刻的体会到了，这是在书本上学不来的东西，只有在实际开发之中才能明白。&lt;/p&gt;
&lt;h3 id=&#34;2达到现实的原因&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#2达到现实的原因&#34;&gt;#&lt;/a&gt; 2. 达到现实的原因&lt;/h3&gt;
&lt;p&gt;这一篇文章是我第一次真正认真使用 markdown 写作，当然，这是在我发现了 markdown 的众多优点之后做出的决定。我很久以前，就有写些东西的习惯，最早的保存下来的记录，是在 15 年，用纸质保存，后来，小米的便签伴随我到现在，其中，也用过 word，到现在，越来越明晰数据流动的我，发觉还是 markdown 最适合我，word 终究是有些笨重的，适合给普通人使用，而作为程序员的我，在数据的处理上，自然有自己的心得，现在的我，对于数据世界的本质越发明晰，越发清楚程序就是数据结构和算法的合集，只要知道了如何存储数据，如何操作数据，那么，就自然在程序的世界之中游刃有余了。&lt;/p&gt;
&lt;p&gt;促使我达到现在的境界的原因很大一部分来自于《编码》这本书，它使我对计算机的底层有了一个浅显直观的了解，并为未来打好了基础。然后，促使我达到真正如今的境界的还是 nodejs 的学习，在跟着黑马程序员的视频学习 node 的时候，知道了 web 服务器的本质就是监听 80 端口，并且读取本地的 html 文件，并且通过 tcp 连接发送给客户端，一切，都融会贯通。从前，不知道这一点的我，认为 web 服务器就是一个黑箱，后来，逐渐了解之后，才发现，原来，web 服务器就是那么简单。读取文件，发送给客户端，就是这么的朴实无华。当然，要明白这一个概念，对于文件的操作，是必不可少的，而我对于文件操作的理解，还要来自于 21 年 12 月在做 python 爬虫的时候，在那个时候，我才理解了 io，理解了编程语言不是运行在一个虚空的解释器之中，而是真真切切的运行在电脑之中。在理解文件 io 以前，我对于所有的编程语言的认知，都处于模糊的状态，知道明白了文件 io，自然明白了后端语言是运行在操作系统之上的，而 js，运行在浏览器环境之中，这就解答了我对于以前 js 的迷惑。在不明白这点时，我认为图形界面的应用程序很酷，明白了图形界面不过是调用了操作系统的一个接口之后，我就不再为图形界面感到震惊。&lt;/p&gt;
&lt;h3 id=&#34;3未来之企望&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#3未来之企望&#34;&gt;#&lt;/a&gt; 3. 未来之企望&lt;/h3&gt;
&lt;p&gt;在未来，我将对数据越来越得心应手的处理，对计算机底层的理解越来越深入，对应用层的运用，也将越发熟练。&lt;/p&gt;
</content>
        <updated>2022-10-29T15:02:00.000Z</updated>
    </entry>
</feed>
